
Task_id_010.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000013a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075d  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000652  00000000  00000000  0000096d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bc  00000000  00000000  00000fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000014  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  74:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Det_ReportError>:


void Det_ReportError(void)
{
  7c:	08 95       	ret

0000007e <main>:


int main(void)
{
	uint8 data = 0;
	UART_Init();
  7e:	0e 94 44 00 	call	0x88	; 0x88 <UART_Init>
    while (1) 
    {
		UART_ReceiveByte();
  82:	0e 94 54 00 	call	0xa8	; 0xa8 <UART_ReceiveByte>
  86:	fd cf       	rjmp	.-6      	; 0x82 <main+0x4>

00000088 <UART_Init>:

void UART_Init(void)
{
	/* config. UART operating speed mode */
	#if OPERATION_MODE == DOUBLE_SPEED_MODE
	SET_BIT(UCSRA, U2X);
  88:	59 9a       	sbi	0x0b, 1	; 11
	#endif
	/* enable Transmitting and Receiving data through UART */
	UCSRB |= (1<<RXEN) | (1<<TXEN);
  8a:	8a b1       	in	r24, 0x0a	; 10
  8c:	88 61       	ori	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
	/* setting 8-bit data mode */
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
  90:	80 b5       	in	r24, 0x20	; 32
  92:	86 68       	ori	r24, 0x86	; 134
  94:	80 bd       	out	0x20, r24	; 32
	/* config. baud_rate */
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
  96:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	89 b9       	out	0x09, r24	; 9
	UART_ReceivedByte = 0;
  9c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <UART_ReceivedByte>
	UART_isInit = UART_Initialized;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  a6:	08 95       	ret

000000a8 <UART_ReceiveByte>:
}

void UART_ReceiveByte(void)
{
	if (UART_isInit != UART_Initialized)
  a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	19 f0       	breq	.+6      	; 0xb6 <UART_ReceiveByte+0xe>
	{
		Det_ReportError();
  b0:	0e 94 3e 00 	call	0x7c	; 0x7c <Det_ReportError>
  b4:	08 95       	ret
	}
	else
	{
		while (!GET_BIT(UCSRA, RXC));
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <UART_ReceiveByte+0xe>
		UART_ReceivedByte = UDR;	
  ba:	8c b1       	in	r24, 0x0c	; 12
  bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <UART_ReceivedByte>
  c0:	08 95       	ret

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
