
Task_id_003.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000162  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000639  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000592  00000000  00000000  00000839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000257  00000000  00000000  00000dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000356  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5d 00 	call	0xba	; 0xba <main>
  74:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_6>:
void setupTimer1_ctc(void);

volatile uint8 t_flag = 0;

ISR(TIMER1_COMPA_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	t_flag = 1;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <setupTimer1_ctc>:
}

void setupTimer1_ctc(void)
{
	/* disable global interrupt */
	cli();
  9a:	f8 94       	cli
	/* reset Timer1 register TCNT1 value to 0 */
	TCNT1 = 0;
  9c:	1d bc       	out	0x2d, r1	; 45
  9e:	1c bc       	out	0x2c, r1	; 44
	/* set OCR1A value to 15625 to let the timer trigger the interrupt every 1 second */
	OCR1A = 15625;           
  a0:	89 e0       	ldi	r24, 0x09	; 9
  a2:	9d e3       	ldi	r25, 0x3D	; 61
  a4:	9b bd       	out	0x2b, r25	; 43
  a6:	8a bd       	out	0x2a, r24	; 42
	/* set output compare a match interrupt enable (OCIE1A) to enable interrupt when compare match happen */
	TIMSK |= (1<<OCIE1A);
  a8:	89 b7       	in	r24, 0x39	; 57
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	89 bf       	out	0x39, r24	; 57
	/* enable global interrupt */
	sei();
  ae:	78 94       	sei
	/* configure timer1 to CTC mode with prescaler clk/64 */ 
	TCCR1A = (1<<FOC1A);
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS11); 
  b4:	8b e0       	ldi	r24, 0x0B	; 11
  b6:	8e bd       	out	0x2e, r24	; 46
  b8:	08 95       	ret

000000ba <main>:
}

int main(void)
{
    /* Initialize IO pins */
	ASSIGN_REG_VALUE(DDRB, 7);  /* PortB as output */
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	87 bb       	out	0x17, r24	; 23
	ASSIGN_REG_VALUE(PORTB, 0); /* PortB output 0 */
  be:	18 ba       	out	0x18, r1	; 24
	
	/* Initialize Timer1 and start the timer */
	setupTimer1_ctc();
  c0:	0e 94 4d 00 	call	0x9a	; 0x9a <setupTimer1_ctc>
	
    while (1) 
    {
		if (t_flag == 1)
		{
			TOGGLE_BIT(PORTB, PB0);
  c4:	31 e0       	ldi	r19, 0x01	; 1
			TOGGLE_BIT(PORTB, PB1);
  c6:	22 e0       	ldi	r18, 0x02	; 2
			TOGGLE_BIT(PORTB, PB2);
  c8:	94 e0       	ldi	r25, 0x04	; 4
	/* Initialize Timer1 and start the timer */
	setupTimer1_ctc();
	
    while (1) 
    {
		if (t_flag == 1)
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x10>
		{
			TOGGLE_BIT(PORTB, PB0);
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	83 27       	eor	r24, r19
  d6:	88 bb       	out	0x18, r24	; 24
			TOGGLE_BIT(PORTB, PB1);
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	82 27       	eor	r24, r18
  dc:	88 bb       	out	0x18, r24	; 24
			TOGGLE_BIT(PORTB, PB2);
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	89 27       	eor	r24, r25
  e2:	88 bb       	out	0x18, r24	; 24
			t_flag = 0;	
  e4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  e8:	f0 cf       	rjmp	.-32     	; 0xca <main+0x10>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
